// /src/renderer/js/renderer.js (Refatorado com Bindings)
// =================================================================================
// MAIN RENDERER SCRIPT
// =================================================================================

import { store } from './modules/store.js';
import * as ui from './modules/ui.js';
import { setupEventListeners } from './modules/events.js';
// --- IN√çCIO DA ALTERA√á√ÉO ---
// Importamos a fun√ß√£o que inicializa nosso sistema de reatividade.
import { initializeBindings } from './modules/uiBindings.js';
// --- FIM DA ALTERA√á√ÉO ---


const commandIcons = {
    '/nota': 'üìù',
    '/task': '‚úÖ',
    '/reuniao': 'üéôÔ∏è',
    '/ia var': 'v',
    '/ia css': 'üé®',
    '/gaia log': 'üìì',
    '/dashboard': 'üìä',
    'default': '‚ö°'
};

async function renderQuickActions() {
    const quickActionsBar = document.getElementById('quick-actions-bar');
    if (!quickActionsBar) return;

    const activeModel = await window.api.ai.getActiveModel();
    if (!activeModel) {
        quickActionsBar.classList.add('hidden');
        return;
    }

    const commandSettingsObject = await window.api.commands.getSettingsForModel(activeModel.key);
    const commandSettings = new Map(Object.entries(commandSettingsObject));

    const quickActionCommands = Array.from(commandSettings.entries())
        .filter(([_, settings]) => settings.is_quick_action);
    
    quickActionsBar.innerHTML = ''; 
    if (quickActionCommands.length === 0) {
        quickActionsBar.classList.add('hidden');
    } else {
        quickActionCommands.forEach(([commandString, settings]) => {
            const button = document.createElement('button');
            const icon = Object.entries(commandIcons).find(([key, _]) => commandString.startsWith(key))?.[1] || commandIcons.default;
            
            button.className = 'action-button';
            button.textContent = icon;
            button.title = commandString;

            button.dataset.commandString = commandString;
            button.dataset.isDirectAction = settings.is_direct_action;

            quickActionsBar.appendChild(button);
        });
        quickActionsBar.classList.remove('hidden');
    }
}

// --- IN√çCIO DA ALTERA√á√ÉO ---
// A fun√ß√£o updateCommandModeUI foi movida para ui.js e n√£o √© mais necess√°ria aqui.
// --- FIM DA ALTERA√á√ÉO ---


document.addEventListener("DOMContentLoaded", async () => {
  
  try {
    const commands = await window.api.getCommands();
    store.getState().setCommands(commands);
  } catch (error) {
    console.error("Falha ao carregar lista de comandos:", error);
  }
  
  ui.updateSpeechBubble("Ol√°! Estou pronto para ajudar.", false);
  ui.showInputSection();
  ui.scheduleInputHidden();
  ui.autoResizeTextarea();
  await ui.updateAiStatus();
  await renderQuickActions();

  setupEventListeners();

  // --- IN√çCIO DA ALTERA√á√ÉO ---
  // Substitu√≠mos todos os 'store.subscribe' individuais por uma √∫nica
  // chamada que configura toda a reatividade da UI.
  initializeBindings();
  // --- FIM DA ALTERA√á√ÉO ---

  // Os listeners de eventos da API do Electron que acionam a renderiza√ß√£o
  // permanecem aqui, pois s√£o um ponto de entrada para a aplica√ß√£o.
  window.api.on('ai-model-changed', renderQuickActions);
  window.api.on('commands:refresh-quick-actions', renderQuickActions);
});